name: Combined Workflow for SLSA Provenance, SBOM, and Policy Enforcement

on:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  combined-workflow:
    runs-on: ubuntu-latest
    env:
      HARNESS_ACCOUNT_URL: 'https://qa.harness.io'
      HARNESS_ACCOUNT_ID: 'ppbLW9YpRharzPs_JtWT7g'
      HARNESS_ORG_ID: 'default'
      HARNESS_PROJECT_ID: 'SBOM_orchestration'
      HARNESS_API_KEY: ${{ secrets.SSCA_PR_API_KEY }}

    steps:
      # # Step 1: Checkout the main repository
      # - name: Checkout Main Repository
      #   uses: actions/checkout@v3

      # # Step 2: Clone Additional Repository
      # - name: Clone Additional Repository
      #   run: |
      #     git clone https://github.com/nginxinc/docker-nginx.git
      #     echo "Cloned additional repository: docker-nginx"
      
      # # Step 3: Log in to Docker Hub
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # # Step 4: Build and Tag Docker Image
      # - name: Build and Tag Docker Image
      #   run: |
      #     cd docker-nginx
      #     docker build -t kartikey366/nginx:github-actions -f ./stable/alpine/Dockerfile .
      #     echo "Docker image built and tagged as kartikey366/nginx:github-actions."

      # # Step 5: Push the Docker Image to Docker Hub
      # - name: Push Docker Image
      #   run: |
      #     docker push kartikey366/nginx:github-actions
      #     echo "Docker image pushed to Docker Hub."

      # Step 6: Log in to Vault
      - name: Log in to Vault
        uses: hashicorp/vault-action@v2
        id: vault_login
        with:
          url: ${{ secrets.VAULT_URL }}
          method: token
          token: ${{ secrets.VAULT_TOKEN }}
          outputToken: true

      # Step 7: Verify Vault Login and Print Token
      - name: Verify Vault Login and Print Token
        run: |
          echo "Vault login successful."
          echo "Vault Token: ${{ steps.vault_login.outputs.token }}"
        env:
          VAULT_TOKEN: ${{ steps.vault_login.outputs.token }}  # Ensuring token is accessible

      # Step 8: Set Vault Environment Variables
      - name: Set Vault Environment Variables
        run: |
          echo "VAULT_ADDR=${{ secrets.VAULT_URL }}" >> $GITHUB_ENV
          echo "VAULT_TOKEN=${{ steps.vault_login.outputs.token }}" >> $GITHUB_ENV

      # Step 9: Retrieve Cosign Public Key from Vault and Set It as an Environment Variable
      - name: Retrieve Cosign Public Key from Vault
        uses: hashicorp/vault-action@v2
        id: cosign_key
        with:
          url: ${{ secrets.VAULT_URL }}
          method: token
          token: ${{ secrets.VAULT_TOKEN }}
          path: secret/cosign-key         # Path where the cosign key is stored in Vault
          field: public_key              # Field to extract from the secret

      # Step 10: Set the COSIGN_KEY in the GitHub Actions environment
      - name: Set COSIGN_KEY environment variable
        run: |
          echo "COSIGN_KEY=${{ steps.cosign_key.outputs.field }}" >> $GITHUB_ENV  # Save the key as an environment variable

      # Example step using the COSIGN_KEY
      - name: Use Cosign Public Key
        run: |
          echo "The Cosign public key is: $COSIGN_KEY"
      
      # # Step 11: Run SLSA Provenance Action
      # - name: Run SLSA Provenance Action
      #   uses: ./slsa-generation
      #   with:
      #     TARGET: 'kartikey366/nginx:github-actions'
      #     ATTEST: true
      #     KMS_KEY: 'cosign'

      # # Step 12: Run SBOM Orchestration Action
      # - name: Run SBOM Orchestration Action
      #   uses: ./sbom-generation
      #   with:
      #     TOOL: 'Syft'
      #     FORMAT: 'spdx-json'
      #     TARGET: 'kartikey366/nginx:github-actions'
      #     ATTEST: false
      #     KMS_KEY: 'cosign'

      # # Step 13: Run SBOM Policy Enforcement Action
      # - name: Run SBOM Policy Enforcement Action
      #   uses: ./sbom-policy-enforcement
      #   with:
      #     TARGET: 'kartikey366/nginx:github-actions'
      #     VERIFY: true
          KMS_KEY: 'cosign'
          POLICY_SET_REF: 'opa_policy_set_for_at'
